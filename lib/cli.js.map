{"version":3,"sources":["../src/cli.es6"],"names":["logDebug","exit","message","console","error","process","argv","usage","demand","store","resolve","_","default","filterParts","f","split","filter","results","get","p","ensureDirSync","parse","o","dir","writeFileSync"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,WAAW,qBAAM,WAAN,CAAjB;;AAEA,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrBC,UAAQC,KAAR,CAAcF,OAAd;AACAG,UAAQJ,IAAR;AACD;;AAED,IAAMK,OAAO,gBACVC,KADU,CACJ,mDADI,EAEVC,MAFU,CAEH,CAAC,GAAD,EAAK,GAAL,EAAU,GAAV,CAFG,EAGVA,MAHU,CAGH,CAHG,EAIVF,IAJH;AAKAN,SAAS,QAAT,EAAmBM,IAAnB;;AAEA,IAAIG,QAAQ,0BAAW,eAAKC,OAAL,CAAaJ,KAAKK,CAAL,CAAO,CAAP,CAAb,CAAX,CAAZ;AACAX,SAAS,QAAT,EAAmB,eAAKU,OAAL,CAAaJ,KAAKK,CAAL,CAAO,CAAP,CAAb,CAAnB;AACAX,SAAS,SAAT,EAAoBS,KAApB;;AAEA,IAAI,CAACA,KAAL,EAAY;AACVR,OAAK,8BAAL;AACD;;AAEDQ,QAAQA,MAAMG,OAAN,GAAgBH,MAAMG,OAAtB,GAAgCH,KAAxC;;AAEA,IAAMI,cAAcP,KAAKQ,CAAL,CAAOC,KAAP,CAAa,GAAb,CAApB;AACA,IAAMC,6BACHH,YAAY,CAAZ,CADG,EACcA,YAAY,CAAZ,CADd,CAAN;AAGAb,SAASgB,MAAT;;AAEA,IAAMC,UAAUR,MAAMS,GAAN,CAAUZ,KAAKa,CAAf,EAAkBH,MAAlB,CAAhB;AACAhB,SAASiB,OAAT;;AAEA,kBAAGG,aAAH,CAAiB,eAAKV,OAAL,CAAa,eAAKW,KAAL,CAAWf,KAAKgB,CAAhB,EAAmBC,GAAhC,CAAjB;AACA,mBAASC,aAAT,CAAuB,eAAKd,OAAL,CAAaJ,KAAKgB,CAAlB,CAAvB,EAA6CL,OAA7C;AACAZ,QAAQJ,IAAR","file":"cli.js","sourcesContent":["\nimport yargs from 'yargs'\nimport tryRequire from 'try-require'\nimport path from 'path'\nimport debug from 'debug'\nimport jsonfile from 'jsonfile'\nimport fs from 'fs-extra'\n\nconst logDebug = debug('confStore')\n\nfunction exit(message) {\n  console.error(message)\n  process.exit()\n}\n\nconst argv = yargs\n  .usage('Usage: $0 [store] -p [path] -f [filter] -o [file]')\n  .demand(['p','f', 'o'])\n  .demand(1)\n  .argv\nlogDebug('args: ', argv)\n\nlet store = tryRequire(path.resolve(argv._[0]))\nlogDebug('path: ', path.resolve(argv._[0]))\nlogDebug('store: ', store)\n\nif (!store) {\n  exit('Err: path to store not found')\n}\n\nstore = store.default ? store.default : store\n\nconst filterParts = argv.f.split('=')\nconst filter = {\n  [filterParts[0]]: filterParts[1]\n}\nlogDebug(filter)\n\nconst results = store.get(argv.p, filter)\nlogDebug(results)\n\nfs.ensureDirSync(path.resolve(path.parse(argv.o).dir))\njsonfile.writeFileSync(path.resolve(argv.o), results)\nprocess.exit()\n"]}